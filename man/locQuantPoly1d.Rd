% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{locQuantPoly1d}
\alias{locQuantPoly1d}
\title{One-dimensional kernel local polynominal smoother of quantiles}
\usage{
locQuantPoly1d(bandwidth, probs, x, y, w, xout, kernel, drv, degree)
}
\arguments{
\item{bandwidth}{A single numerical value. The kernel smoothing parameter.}

\item{probs}{A numeric vector with values between 0 and 1. The probabilities of quantiles.}

\item{x}{A vector, the variable of of x-axis.}

\item{y}{A vector, the variable of of y-axis. \code{y[i]} is corresponding value of \code{x[i]}.}

\item{w}{A vector, the weight of data. \code{w[i]} is corresponding value of \code{x[i]}.}

\item{xout}{A vector, vector of output time points. It should be a sorted vecotr.}

\item{kernel}{A string. It could be 'gauss', 'gaussvar', 'epan' or 'quar'.}

\item{drv}{An integer, the order of derivative.}

\item{degree}{An integer, the degree of polynomial.}
}
\value{
A estimated value on \code{xout} by one-dimensional kernel local polynominal smoother of quantiles
corresponding to the given probabilities.
}
\description{
Perform one-dimensional kernel local polynominal smoother of quantiles corresponding to the
given probabilities for data \code{(x,y)} with weight \code{w} on \code{xout}.
}
\examples{
N <- 100
x <- runif(N, 0, 10)
y <- rnorm(N)
xout <- sort(runif(200, 0, 10))
est <- locPoly1d(1.2, x, y, rep(1, N), xout, 'gauss', 0, 1)
require(pipeR)
require(data.table)
est_quant <- locQuantPoly1d(1.2, c(0.25, 0.5, 0.75), x, y, rep(1, N), xout, 'gauss', 0, 1) \%>>\%
  data.table \%>>\% setnames(c("Q25", "Q50", "Q75"))
linesDF <- est_quant[ , `:=`(x = xout, loess = est)] \%>>\% melt.data.table("x", value.name = "y")
require(ggplot2)
ggplot(data.frame(x,y), aes(x, y)) + geom_point() +
  geom_line(aes(x, y, colour = variable), data = linesDF) +
  labs(colour = "Type")
}
\references{
\enumerate{
  \item https://www.r-statistics.com/2010/04/quantile-loess-combining-a-moving-quantile-window-with-loess-r-function
}
}

