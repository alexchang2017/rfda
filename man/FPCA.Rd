% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FPCA.R
\name{FPCA}
\alias{FPCA}
\title{Calculating the functional principal components}
\usage{
FPCA(y, t, FPCA_opts = NULL, ...)
}
\arguments{
\item{y}{A list with n elements, \code{y[[i]]} is the vector of observed measurements for
the ith subject, \code{i=1,...,n}.}

\item{t}{A list with n elements, \code{t[[i]]} is the vector of time points for the
ith subject for which corresponding measurements \code{y[[i]]} are available,
\code{i=1,...,n}.}

\item{FPCA_opts}{An R6 object. Please see \code{\link{get_FPCA_opts}} for more details.
The default is NULL.}

\item{...}{Extra arguments for \code{\link{get_FPCA_opts}}.}

\item{formula}{an object of class "formula", a symbolic description of the model to be fitted.
The RHS of `~` is the response and LHS is time variables.}

\item{data}{}
}
\value{
An R6 object containing mean, covariance, eigen functions,
  functional principal components scores, etc. Please see "Details" for more details.
}
\description{
Return mean, covariance, eigen functions and fpc scores.
}
\examples{
library(magrittr)
\dontrun{
## Following three examples may take long time.
library(dplyr)
# Taiwan freeway 5 data
data("TaiwanFreeway5vdData", package = 'rpace')
df <- TaiwanFreeway5vdData \%>\% filter(vdid == 'nfbVD-5S-9.063') \%>\%
  mutate(sampleID = sprintf("\%04i_\%02i_\%02i", year, month, day), time = hour + (minute+1)/60)
splitData_TWFW5 <- df2FPCA_list_f("sampleID", c("volume", "time"), df)
res_FPCA_TWFW5 <- splitData_TWFW5 \%$\% FPCA(volume, time)

# sparse case
data("exampleData_sparse", package = 'rpace')
splitData_s <- df2FPCA_list_f("sampleID", c("response", "timePoint"), exampleData_sparse)
res_FPCA_s <- splitData_s \%$\% FPCA(response, timePoint)

# regular with missing values case
data("exampleData_regular_with_missing", package = 'rpace')
splitData_rm <- df2FPCA_list_f("sampleID", c("response", "timePoint"),
  exampleData_regular_with_missing)
res_FPCA_rm <- splitData_rm \%$\% FPCA(response, timePoint)
}

# regular case
data("exampleData_regular", package = 'rpace')
splitData_r <- df2FPCA_list_f("sampleID", c("response", "timePoint"), exampleData_regular)
res_FPCA_r <- splitData_r \%$\% FPCA(response, timePoint)

# convert FPCA_results to a list
res_FPCA_r_list <- res_FPCA_r$conv2list()

# use the eval function to get the prediction at different time points
new_y_pred_1 <- res_FPCA_r$eval(c(1, 2, 6), seq(0.1, 0.5, 0.1))
new_y_pred_2 <- res_FPCA_r$eval(c(1, 2, 6), list(c(0.1, 0.2), c(0.3, 0.4, 0.5), c(0.6, 0.8, 1)))

# use the predict function to get the prediction with different measurements
# at different time points
new_y_pred_3 <- res_FPCA_r$predict(list(c(2, 5, 6), c(3, 7, 9), c(4, 8, 11)), c(1, 3, 5))
new_y_pred_4 <- res_FPCA_r$predict(list(c(2, 5, 6), c(3, 7, 9), c(4, 8, 11)),
                                   list(c(1, 2, 3), c(3, 4, 5), c(6, 8, 10)))
}
\seealso{
\code{\link{get_FPCA_opts}} for input options.
  \code{\link{FPCA_options}} for option class.
  \code{\link{FPCA_results}} for output class.
}

