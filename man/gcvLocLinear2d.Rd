% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{gcvLocLinear2d}
\alias{gcvLocLinear2d}
\title{Find the optimal bandwidth for two-dimensional kernel linear local smoother}
\usage{
gcvLocLinear2d(bwCand, x, y, w, count, kernel, bwNumGrid = 30)
}
\arguments{
\item{bwCand}{A numerical vector for the candidates of bandwidth.}

\item{x}{A matrix, the variable of of x-axis and y-axis.}

\item{y}{A vector, the variable of of z-axis. \code{y[i]} is corresponding value of \code{x[i, ]}.}

\item{w}{A vector, the weight of data. \code{w[i]} is corresponding value of \code{x[i,]}.}

\item{count}{A vector, the number of observations at \code{x[i, ]}.}

\item{kernel}{A string. It could be 'gauss', 'gaussvar', 'epan' or 'quar'.}

\item{bwNumGrid}{The number of support points of smoothing surface.
A smaller \code{bwNumGrid} accelerate process at less accuracy.}
}
\value{
A optimal bandwidth selected by minimizing gcv scores.
}
\description{
Find the optimal bandwidth used in \code{\link{locLinear2d}}.
}
\examples{
data("regularExData", package = 'rfda')
sparsity <- checkSparsity(regularExData, "sampleID", "t")
bwCand <- bwCandChooser(regularExData, "sampleID", "t", sparsity, "gauss", 1)
w <- rep(1, nrow(regularExData))
bwOpt <- gcvLocPoly1d(bwCand, regularExData$t, regularExData$y, w, "gauss", 0, 1)
bwOpt <- adjGcvBw(bwOpt, sparsity, "gauss", 0)
xout <- sort(unique(regularExData$t))
meanFunc <- locPoly1d(bwOpt, regularExData$t, regularExData$y, w, xout, "gauss", 0, 1)
require(data.table)
require(pipeR)
demeanDataDT <- merge(data.table(regularExData), data.table(mf = meanFunc, t = xout), by = "t") \%>>\%
  `[`( , `:=`(y = y - mf, variable = "y")) \%>>\%
  setnames(c("t", "y", "sampleID"), c("timePnt", "value", "subId"))
RawCov <- getRawCrCov(demeanDataDT)

RawCovNoDiag <- RawCov[t1 != t2]
bwCand <- bwCandChooser2(RawCovNoDiag, sparsity, "gauss", 1)
bwOpt <- gcvLocLinear2d(bwCand, as.matrix(RawCovNoDiag[ , .(t1, t2)]), RawCovNoDiag$sse,
  RawCovNoDiag$weight, RawCovNoDiag$cnt, "gauss", 30)
bwOpt <- adjGcvBw(bwOpt, 2, "gauss", 0)
}

