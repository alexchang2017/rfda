// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// factorial_f
double factorial_f(double k);
RcppExport SEXP rfda_factorial_f(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(factorial_f(k));
    return rcpp_result_gen;
END_RCPP
}
// quantileCpp
arma::vec quantileCpp(const arma::vec& x, const arma::vec& probs);
RcppExport SEXP rfda_quantileCpp(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileCpp(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// trapz_cpp
arma::mat trapz_cpp(const arma::vec& x, const arma::mat& y);
RcppExport SEXP rfda_trapz_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(trapz_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// corrGen
Rcpp::NumericVector corrGen(const arma::vec& x, const std::string& corrType, const double x0, const double nu);
RcppExport SEXP rfda_corrGen(SEXP xSEXP, SEXP corrTypeSEXP, SEXP x0SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type corrType(corrTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(corrGen(x, corrType, x0, nu));
    return rcpp_result_gen;
END_RCPP
}
// funcDataGen
Rcpp::DataFrame funcDataGen(const double& n, const arma::vec& timePnt, const Rcpp::Function meanFunc, const Rcpp::Function varFunc, const std::string corrType, const double measErrVar, const double x0, const double nu);
RcppExport SEXP rfda_funcDataGen(SEXP nSEXP, SEXP timePntSEXP, SEXP meanFuncSEXP, SEXP varFuncSEXP, SEXP corrTypeSEXP, SEXP measErrVarSEXP, SEXP x0SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timePnt(timePntSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type meanFunc(meanFuncSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type varFunc(varFuncSEXP);
    Rcpp::traits::input_parameter< const std::string >::type corrType(corrTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type measErrVar(measErrVarSEXP);
    Rcpp::traits::input_parameter< const double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(funcDataGen(n, timePnt, meanFunc, varFunc, corrType, measErrVar, x0, nu));
    return rcpp_result_gen;
END_RCPP
}
// getEigRes
Rcpp::List getEigRes(const arma::mat& CFMat2, const arma::vec& variable, const arma::vec& workTimePnts, const arma::vec& meanFuncsWork, const arma::vec& allTimePnts);
RcppExport SEXP rfda_getEigRes(SEXP CFMat2SEXP, SEXP variableSEXP, SEXP workTimePntsSEXP, SEXP meanFuncsWorkSEXP, SEXP allTimePntsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type CFMat2(CFMat2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type workTimePnts(workTimePntsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type meanFuncsWork(meanFuncsWorkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type allTimePnts(allTimePntsSEXP);
    rcpp_result_gen = Rcpp::wrap(getEigRes(CFMat2, variable, workTimePnts, meanFuncsWork, allTimePnts));
    return rcpp_result_gen;
END_RCPP
}
// getFpcScoresIN
arma::mat getFpcScoresIN(const arma::vec& allTimePnts, const arma::vec& splitVar, const arma::mat& yMat, const arma::mat& eigFuncs, const double& shrink, const arma::rowvec& eigVals, const arma::vec& measErrVar);
RcppExport SEXP rfda_getFpcScoresIN(SEXP allTimePntsSEXP, SEXP splitVarSEXP, SEXP yMatSEXP, SEXP eigFuncsSEXP, SEXP shrinkSEXP, SEXP eigValsSEXP, SEXP measErrVarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type allTimePnts(allTimePntsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eigFuncs(eigFuncsSEXP);
    Rcpp::traits::input_parameter< const double& >::type shrink(shrinkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eigVals(eigValsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type measErrVar(measErrVarSEXP);
    rcpp_result_gen = Rcpp::wrap(getFpcScoresIN(allTimePnts, splitVar, yMat, eigFuncs, shrink, eigVals, measErrVar));
    return rcpp_result_gen;
END_RCPP
}
// getFpcScoresReg
Rcpp::List getFpcScoresReg(const arma::vec& allTimePnts, const arma::vec& splitVar, const arma::mat& yMat, const arma::mat& eigFuncs, const arma::rowvec& eigVals, const arma::vec& measErrVar, const std::string& methodFPCS);
RcppExport SEXP rfda_getFpcScoresReg(SEXP allTimePntsSEXP, SEXP splitVarSEXP, SEXP yMatSEXP, SEXP eigFuncsSEXP, SEXP eigValsSEXP, SEXP measErrVarSEXP, SEXP methodFPCSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type allTimePnts(allTimePntsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eigFuncs(eigFuncsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eigVals(eigValsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type measErrVar(measErrVarSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type methodFPCS(methodFPCSSEXP);
    rcpp_result_gen = Rcpp::wrap(getFpcScoresReg(allTimePnts, splitVar, yMat, eigFuncs, eigVals, measErrVar, methodFPCS));
    return rcpp_result_gen;
END_RCPP
}
// getFpcScoresSparse
Rcpp::List getFpcScoresSparse(const arma::vec& splitVar, const arma::field<arma::vec>& yList, const arma::vec& timeIdx, const arma::vec& subId, const arma::mat& eigFuncs, const arma::rowvec& eigVals, const arma::vec& measErrVar, const std::string& methodFPCS, const double& getMse);
RcppExport SEXP rfda_getFpcScoresSparse(SEXP splitVarSEXP, SEXP yListSEXP, SEXP timeIdxSEXP, SEXP subIdSEXP, SEXP eigFuncsSEXP, SEXP eigValsSEXP, SEXP measErrVarSEXP, SEXP methodFPCSSEXP, SEXP getMseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type yList(yListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timeIdx(timeIdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type subId(subIdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eigFuncs(eigFuncsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eigVals(eigValsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type measErrVar(measErrVarSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type methodFPCS(methodFPCSSEXP);
    Rcpp::traits::input_parameter< const double& >::type getMse(getMseSEXP);
    rcpp_result_gen = Rcpp::wrap(getFpcScoresSparse(splitVar, yList, timeIdx, subId, eigFuncs, eigVals, measErrVar, methodFPCS, getMse));
    return rcpp_result_gen;
END_RCPP
}
// getRhoReg
arma::vec getRhoReg(const arma::vec& rhoFactor, const arma::vec& allTimePnts, const arma::vec& splitVar, const arma::mat& yMat, const arma::mat& eigFuncs, const arma::rowvec& eigVals, const arma::vec& measErrVar, const std::string& methodFPCS, const std::string& rho, const double& minMearErr);
RcppExport SEXP rfda_getRhoReg(SEXP rhoFactorSEXP, SEXP allTimePntsSEXP, SEXP splitVarSEXP, SEXP yMatSEXP, SEXP eigFuncsSEXP, SEXP eigValsSEXP, SEXP measErrVarSEXP, SEXP methodFPCSSEXP, SEXP rhoSEXP, SEXP minMearErrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rhoFactor(rhoFactorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type allTimePnts(allTimePntsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eigFuncs(eigFuncsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eigVals(eigValsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type measErrVar(measErrVarSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type methodFPCS(methodFPCSSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type minMearErr(minMearErrSEXP);
    rcpp_result_gen = Rcpp::wrap(getRhoReg(rhoFactor, allTimePnts, splitVar, yMat, eigFuncs, eigVals, measErrVar, methodFPCS, rho, minMearErr));
    return rcpp_result_gen;
END_RCPP
}
// getRhoSparse
arma::vec getRhoSparse(const arma::vec& rhoFactor, const arma::vec& splitVar, const arma::field<arma::vec>& yList, const arma::vec& timeIdx, const arma::vec& subId, const arma::mat& eigFuncs, const arma::rowvec& eigVals, const arma::vec& measErrVar, const std::string& methodFPCS, const std::string& rho);
RcppExport SEXP rfda_getRhoSparse(SEXP rhoFactorSEXP, SEXP splitVarSEXP, SEXP yListSEXP, SEXP timeIdxSEXP, SEXP subIdSEXP, SEXP eigFuncsSEXP, SEXP eigValsSEXP, SEXP measErrVarSEXP, SEXP methodFPCSSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rhoFactor(rhoFactorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type yList(yListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timeIdx(timeIdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type subId(subIdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eigFuncs(eigFuncsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eigVals(eigValsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type measErrVar(measErrVarSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type methodFPCS(methodFPCSSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(getRhoSparse(rhoFactor, splitVar, yList, timeIdx, subId, eigFuncs, eigVals, measErrVar, methodFPCS, rho));
    return rcpp_result_gen;
END_RCPP
}
// spline_cpp
arma::mat spline_cpp(const arma::vec& x, const arma::mat& y, const arma::vec& xi);
RcppExport SEXP rfda_spline_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_cpp(x, y, xi));
    return rcpp_result_gen;
END_RCPP
}
// interp1_cpp
arma::mat interp1_cpp(const arma::vec& x, const arma::mat& y, const arma::vec& xi, const std::string& method);
RcppExport SEXP rfda_interp1_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xiSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(interp1_cpp(x, y, xi, method));
    return rcpp_result_gen;
END_RCPP
}
// interp2
arma::mat interp2(const arma::vec& x, const arma::vec& y, const arma::mat& v, const arma::vec& xi, arma::vec& yi, const std::string& method);
RcppExport SEXP rfda_interp2(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP, SEXP xiSEXP, SEXP yiSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(interp2(x, y, v, xi, yi, method));
    return rcpp_result_gen;
END_RCPP
}
// locLinear2d
arma::mat locLinear2d(const arma::vec& bandwidth, const arma::mat& x, const arma::vec& y, const arma::vec& w, const arma::vec& count, const arma::vec& out1, const arma::vec& out2, const std::string& kernel);
RcppExport SEXP rfda_locLinear2d(SEXP bandwidthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP countSEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(locLinear2d(bandwidth, x, y, w, count, out1, out2, kernel));
    return rcpp_result_gen;
END_RCPP
}
// gcvLocLinear2d
Rcpp::NumericVector gcvLocLinear2d(arma::mat bwCand, const arma::mat& x, const arma::vec& y, const arma::vec& w, const arma::vec& count, const std::string& kernel, const double bwNumGrid);
RcppExport SEXP rfda_gcvLocLinear2d(SEXP bwCandSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP countSEXP, SEXP kernelSEXP, SEXP bwNumGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type bwCand(bwCandSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type bwNumGrid(bwNumGridSEXP);
    rcpp_result_gen = Rcpp::wrap(gcvLocLinear2d(bwCand, x, y, w, count, kernel, bwNumGrid));
    return rcpp_result_gen;
END_RCPP
}
// locLinearRotate2d_cpp
arma::vec locLinearRotate2d_cpp(const arma::vec& bandwidth, const arma::mat& x, const arma::vec& y, const arma::vec& w, const arma::vec& count, const arma::mat outMat, const std::string& kernel);
RcppExport SEXP rfda_locLinearRotate2d_cpp(SEXP bandwidthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP countSEXP, SEXP outMatSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type outMat(outMatSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(locLinearRotate2d_cpp(bandwidth, x, y, w, count, outMat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// locPoly1d_cpp
arma::vec locPoly1d_cpp(const double& bandwidth, const arma::vec& x, const arma::vec& y, const arma::vec& w, const arma::vec& xout, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_locPoly1d_cpp(SEXP bandwidthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP xoutSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(locPoly1d_cpp(bandwidth, x, y, w, xout, kernel, drv, degree));
    return rcpp_result_gen;
END_RCPP
}
// gcvLocPoly1d
double gcvLocPoly1d(arma::vec bwCand, const arma::vec& x, const arma::vec& y, const arma::vec& w, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_gcvLocPoly1d(SEXP bwCandSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type bwCand(bwCandSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(gcvLocPoly1d(bwCand, x, y, w, kernel, drv, degree));
    return rcpp_result_gen;
END_RCPP
}
// locQuantPoly1d
arma::mat locQuantPoly1d(const double& bandwidth, const arma::vec& probs, const arma::vec& x, const arma::vec& y, const arma::vec& w, const arma::vec& xout, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_locQuantPoly1d(SEXP bandwidthSEXP, SEXP probsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP xoutSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(locQuantPoly1d(bandwidth, probs, x, y, w, xout, kernel, drv, degree));
    return rcpp_result_gen;
END_RCPP
}
// splitMat
Rcpp::List splitMat(const arma::mat& m, const double& margin, const arma::vec& f);
RcppExport SEXP rfda_splitMat(SEXP mSEXP, SEXP marginSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(splitMat(m, margin, f));
    return rcpp_result_gen;
END_RCPP
}
// unique_rows
arma::mat unique_rows(arma::mat x);
RcppExport SEXP rfda_unique_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_rows(x));
    return rcpp_result_gen;
END_RCPP
}
