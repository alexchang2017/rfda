// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// factorial_f
double factorial_f(double k);
RcppExport SEXP rfda_factorial_f(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    __result = Rcpp::wrap(factorial_f(k));
    return __result;
END_RCPP
}
// quantileCpp
arma::vec quantileCpp(const arma::vec& x, const arma::vec& probs);
RcppExport SEXP rfda_quantileCpp(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    __result = Rcpp::wrap(quantileCpp(x, probs));
    return __result;
END_RCPP
}
// trapz_cpp
arma::mat trapz_cpp(const arma::vec& x, const arma::mat& y);
RcppExport SEXP rfda_trapz_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    __result = Rcpp::wrap(trapz_cpp(x, y));
    return __result;
END_RCPP
}
// spline_cpp
arma::mat spline_cpp(const arma::vec& x, const arma::mat& y, const arma::vec& xi);
RcppExport SEXP rfda_spline_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    __result = Rcpp::wrap(spline_cpp(x, y, xi));
    return __result;
END_RCPP
}
// interp1_cpp
arma::mat interp1_cpp(const arma::vec& x, const arma::mat& y, const arma::vec& xi, const std::string& method);
RcppExport SEXP rfda_interp1_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xiSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    __result = Rcpp::wrap(interp1_cpp(x, y, xi, method));
    return __result;
END_RCPP
}
// interp2
arma::mat interp2(const arma::vec& x, const arma::vec& y, const arma::mat& v, const arma::vec& xi, arma::vec& yi, const std::string& method);
RcppExport SEXP rfda_interp2(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP, SEXP xiSEXP, SEXP yiSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    __result = Rcpp::wrap(interp2(x, y, v, xi, yi, method));
    return __result;
END_RCPP
}
// locLinear2d
arma::mat locLinear2d(const arma::vec& bandwidth, const arma::mat& x, const arma::vec& y, const arma::vec& w, const arma::vec& count, const arma::vec& out1, const arma::vec& out2, const std::string& kernel);
RcppExport SEXP rfda_locLinear2d(SEXP bandwidthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP countSEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    __result = Rcpp::wrap(locLinear2d(bandwidth, x, y, w, count, out1, out2, kernel));
    return __result;
END_RCPP
}
// locPoly1d_cpp
arma::vec locPoly1d_cpp(const double& bandwidth, const arma::vec& x, const arma::vec& y, const arma::vec& w, const arma::vec& xout, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_locPoly1d_cpp(SEXP bandwidthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP xoutSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    __result = Rcpp::wrap(locPoly1d_cpp(bandwidth, x, y, w, xout, kernel, drv, degree));
    return __result;
END_RCPP
}
// gcvLocPoly1d
double gcvLocPoly1d(arma::vec bwCand, const arma::vec& x, const arma::vec& y, const arma::vec& w, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_gcvLocPoly1d(SEXP bwCandSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type bwCand(bwCandSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    __result = Rcpp::wrap(gcvLocPoly1d(bwCand, x, y, w, kernel, drv, degree));
    return __result;
END_RCPP
}
// locQuantPoly1d
arma::mat locQuantPoly1d(const double& bandwidth, const arma::vec& probs, const arma::vec& x, const arma::vec& y, const arma::vec& w, const arma::vec& xout, const std::string& kernel, const double& drv, const double& degree);
RcppExport SEXP rfda_locQuantPoly1d(SEXP bandwidthSEXP, SEXP probsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP xoutSEXP, SEXP kernelSEXP, SEXP drvSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double& >::type drv(drvSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    __result = Rcpp::wrap(locQuantPoly1d(bandwidth, probs, x, y, w, xout, kernel, drv, degree));
    return __result;
END_RCPP
}
// unique_rows
arma::mat unique_rows(arma::mat x);
RcppExport SEXP rfda_unique_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    __result = Rcpp::wrap(unique_rows(x));
    return __result;
END_RCPP
}
